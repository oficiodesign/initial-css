@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';

@use 'config' as c;
@use 'constants/font-stacks' as fs;
@use 'functions' as f;

////
/// This file contains all application-wide Sass mixins.
/// @group helpers
////


/// Gray placeholder image
///
///
/// @example scss
/// image[src=""] {
///   @include placeholder-bg;
/// }
///
/// @output css
/// image[src=""] {
///   background:
///     linear-gradient(
///       to top left,
///       transparent 0%,
///       transparent calc(50% - 1px),
///       black 50%,
///       transparent calc(50% + 1px),
///       transparent 100%
///     ),
///     linear-gradient(
///       to top right,
///       transparent 0%,
///       transparent calc(50% - 1px),
///       black 50%,
///       transparent calc(50% + 1px),
///       transparent 100%
///     ),
///     silver;
/// }
///
@mixin placeholder-bg {
  $_placeholder-bg__diagonal: rgb(0, 0, 0);
  $_placeholder-bg__color: rgb(220, 220, 220);

  background: linear-gradient(
    to top left,
    transparent 0%,
    transparent calc(50% - 1px),
    $_placeholder-bg__diagonal 50%,
    transparent calc(50% + 1px),
    transparent 100%
  ), linear-gradient(
    to top right,
    transparent 0%,
    transparent calc(50% - 1px),
    $_placeholder-bg__diagonal 50%,
    transparent calc(50% + 1px),
    transparent 100%
  ), linear-gradient(
    to right,
    $_placeholder-bg__color,
    $_placeholder-bg__color
  );
}

/// Grid background image
///
/// @access public
///
@mixin grid-image($columns: 1, $gutter: c.$gutter) {
  $color: rgba(f.palette('feedback', 'danger'), 0.35);
  $grid-image: $color 0, $color $gutter, transparent $gutter;

  @for $i from 1 to $columns {
    $multiplier: math.div($i, $columns);
    $grid-image: list.append(
      $grid-image,
      (
        transparent calc(#{100% * $multiplier} - #{$gutter * $multiplier}),
        $color calc(#{100% * $multiplier} - #{$gutter * $multiplier}),
        $color calc(#{100% * $multiplier} + #{$gutter * (1 - $multiplier)}),
        transparent calc(#{100% * $multiplier} + #{$gutter * (1 - $multiplier)})
      ),
      'comma'
    );
  }

  background-image: linear-gradient(
    to right,
    #{list.append($grid-image, (transparent calc(100% - #{c.$gutter}), $color calc(100% - #{c.$gutter}), $color 100%), 'comma')}
  );
}


/// Special style for the _&_ used as a conjunction.
///
/// @access private
///
@mixin _italic-overflow {
  overflow: visible;

  font-style: italic;
}

/// Special style for the _&_ used as a conjunction.
///
/// @link http://simplebits.com/notebook/2008/08/14/ampersands-2/
/// @require {variable} fs.$AMPERSAND-FONT-STACK
///
/// @example scss
/// h1 {
/// 	@include alt-ampersand;
/// }
///
/// @example html
/// <h1>This <span class="amp">&amp;</span> that</h1>
///
/// @output css
/// h1 .amp {
/// 	overflow: visible;
/// 	font-style: italic;
/// 	font-size: 2em;
/// 	line-height: 0.25;
/// 	font-family: 'Cochin', 'Hoefler Titling', 'Requiem', 'Hoefler Text', 'Baskerville', 'Baskerville MT', 'Urw Chancery L', 'Goudy Old Style', 'Palatino', 'Palatino Linotype', 'Urw Palladio L', 'Constantia', 'Book Antiqua', serif;
/// 	vertical-align: middle;
/// }
///
@mixin alt-ampersand {
  .amp {
    @include _italic-overflow;
    font-family: fs.$AMPERSAND-FONT-STACK;
    font-size: 2em;
    line-height: 0.25;
    vertical-align: middle;

    @content;
  }
}

/// Special style for conjunctions or prepositions.
///
/// @require {variable} fs.$ALT-FONT-STACK
///
/// @example html
/// <h1>The Elements <span class="alt">of</span> Typographic Style</h1>
///
/// @example scss
/// h1 {
/// 	@include alt-preposition;
/// }
///
/// @output css
/// h1 .alt {
/// 	overflow: visible;
/// 	font-style: italic;
/// 	font-family: 'baskerville italic', 'Warnock Pro', 'Goudy Old Style', 'Palatino', 'palatino linotype', 'Book Antiqua', 'Georgia', serif;
/// }
///
@mixin alt-preposition {
  .alt {
    @include _italic-overflow;

    font-family: fs.$ALT-FONT-STACK;

    @content;
  }
}

/// Helper for an inline-block grid.
///
/// To be used together with [`inline-block-item`](#helpers-mixin-inline-block-item).
///
/// The used font stack makes grids work on all known environments and
/// it's developed by the PureCSS framework team.
///
/// - `FreeSans`: Ships with many Linux distros, including Ubuntu;
/// - `Arimo`: Ships with Chrome OS. Arimo has to be defined before Helvetica and
/// Arial to get picked up by the browser, even though neither is available
/// in Chrome OS;
/// - `Droid Sans`: Ships with all versions of Android;
/// - `Helvetica, Arial, sans-serif`: Common font stack on OS X and Windows.
///
/// @link http://blog.purecss.io/post/60789414532/how-we-improved-grids-in-pure-030
/// @parameter {int} $ie [9] - minimum Internet Explorer version
///
/// @example scss
/// .h-feed {
/// 	@include inline-block-wrapper;
/// }
///
/// .h-feed > .h-entry {
/// 	@include inline-block-item($align: 'top', $font-size:  1rem);
/// }
///
/// @output css
/// .h-feed {
/// 	font-size: 0;
/// 	font-family: "FreeSans", "Arimo", "Droid Sans", "Helvetica", "Arial", sans-serif;
/// 	/* Webkit: collapse white-space between units */
/// 	letter-spacing: -0.31em;
/// 	/* reset IE < 8 */
/// 	letter-spacing: normal\9;
/// 	/* IE < 8: collapse white-space between units */
/// 	word-spacing: -0.43em\9;
/// 	/* Webkit: fixes text-rendering: optimizeLegibility */
/// 	text-rendering: optimizespeed;
/// }
///
@mixin inline-block-wrapper {
  $_inline-block-font-stack: 'FreeSans', 'Arimo', 'Droid Sans', 'Helvetica', 'Arial', sans-serif;
  font-family: $_inline-block-font-stack;
  font-size: 0;
  letter-spacing: -0.31em; /* Webkit: collapse white-space between units */
  // stylelint-disable-next-line declaration-block-no-duplicate-properties
  letter-spacing: normal\9; /* reset IE < 8 */

  word-spacing: -0.43em\9; /* IE < 8: collapse white-space between units */

  text-rendering: optimizeSpeed; /* Webkit: fixes text-rendering: optimizeLegibility */
}

/// Helper for an inline-block grid.
///
/// To be used together with [`inline-block-wrapper`](#helpers-mixin-inline-block-wrapper).
///
/// @require {variable} c.$text-font-stack
/// @parameter {string} $align ['top'] - valid keyword `vertical-alignment` for
/// the grid cells: `baseline`, `sub`, `super`, `text-top`, `text-bottom`,
/// `middle`, `top`, `bottom`.
///
/// @parameter {number} $font-size [1rem] - reset of grid cells font-size
///
/// @example scss
/// .h-feed {
/// 	@include inline-block-wrapper;
/// }
///
/// .h-feed > .h-entry {
/// 	@include inline-block-item($align: 'top', $font-size:  1rem);
/// }
///
/// @output css
/// .h-feed > .h-entry {
/// 	display: inline-block;
/// 	font-size: 1rem;
/// 	font-family: -apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
/// 	letter-spacing: normal;
/// 	word-spacing: normal;
/// 	text-rendering: auto;
/// 	vertical-align: top;
/// 	zoom: 1;
/// }
///
@mixin inline-block-item($align: 'top', $font-size: 1rem) {
  display: inline-block;

  font-family: c.$text-font-stack;
  font-size: $font-size;
  letter-spacing: normal;
  vertical-align: string.unquote($align);

  zoom: 1;

  word-spacing: normal;

  text-rendering: auto;
}

/// Helper for an table grid layout.
///
/// To be used together with [`table-layout-item`](#helpers-mixin-table-layout-item).
///
///
/// @example scss
/// .h-feed {
/// 	@include table-layout-wrapper;
/// }
///
/// .h-feed > .h-entry {
/// 	@include table-layout-item;
/// }
///
/// @output css
/// .h-feed {
/// 	display: table;
/// 	border-collapse: collapse;
/// }
///
@mixin table-layout-wrapper {
  display: table;

  border-collapse: collapse;

  @content;
}

/// Helper for an table grid layout.
///
/// To be used together with [`table-layout-wrapper`](#helpers-mixin-table-layout-wrapper).
///
///
/// @example scss
/// .h-feed {
/// 	@include table-layout-wrapper;
/// }
///
/// .h-feed > .h-entry {
/// 	@include table-layout-item;
/// }
///
/// @output css
/// .h-feed > .h-entry {
/// 	display: table-cell;
/// 	vertical-align: top;
/// }
///
@mixin table-layout-item {
  display: table-cell;

  vertical-align: top;

  @content;
}

/// Special style icon fonts.
///
/// @access private
///
@mixin _font-smoothing($value: true) {
  @if ($value == true) {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

/// Helper for icon font.
///
/// It can be used with Font Awesome
///
/// @example scss
/// .icon {
/// 	@include icon-font;
/// }
///
/// @output css
/// .icon {
/// 	-webkit-font-smoothing: antialiased;
/// 	-moz-osx-font-smoothing: grayscale;
/// 	font-style: normal;
/// 	font-variant: normal;
/// 	font-weight: normal;
/// 	font-size: 14px;
/// 	line-height: 1;
/// 	text-transform: none;
/// 	speak: none;
/// }
///
@mixin icon-font {
  @include _font-smoothing(true);

  // stylelint-disable-next-line property-units
  font-size: 14px; /* font-awesome pixel perfection is at 14px and multiples of 14 */
  font-style: normal;
  font-weight: font-weight('normal');
  font-variant: normal;
  line-height: 1;
  text-transform: none;

  speak: none;
}

@mixin clearfix($ie: 8) {
  /**
	 * For modern browsers
	 * 1. The space content is one way to avoid an Opera bug when the
	 *    contenteditable attribute is included anywhere else in the document.
	 *    Otherwise it causes space to appear at the top and bottom of elements
	 *    that are clearfixed.
	 * 2. The use of `table` rather than `block` is only necessary if using
	 *    `:before` to contain the top-margins of child elements.
	 * 3. To prevent Firefox 57+ border-spacing issues
	 */
  &::before,
  &::after {
    display: table; /* 2 */

    border-collapse: collapse; /* 3 */
    content: ''; /* 1 */
  }

  &::after {
    clear: both;
  }

  @if ($ie <= 8) {
    zoom: 1\9; // old IE sucks
  }
}

@mixin link-undercover {
  &,
  &:link,
  &:visited {
    color: inherit;
    text-decoration: inherit;


    @content;
  }
}

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Kitty Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

// stylelint-disable declaration-no-important

///
/// Hide element while making it readable for screen readers
/// Shamelessly borrowed from HTML5Boilerplate
///
/// @link https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
///
@mixin visually-hidden {
  position: absolute !important;

  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px;
  overflow: hidden !important;
  clip: rect(1px 1px 1px 1px) !important;
  // stylelint-disable-next-line declaration-block-no-duplicate-properties
  clip: rect(1px, 1px, 1px, 1px) !important;
  clip-path: inset(50%) !important;

  white-space: nowrap !important;

  visibility: hidden;

  border: 0 !important;
}

@mixin visually-hidden--focusable {
  @include visually-hidden;

  visibility: visible;

  &:active,
  &:focus {
    position: static !important;

    width: auto !important;
    height: auto !important;
    margin: auto;
    overflow: visible !important;
    clip: auto !important;
    clip-path: none !important;

    white-space: normal !important;
  }
}

// stylelint-enable declaration-no-important

/// Truncate and add ellipsis to a string too long for it to fit on a single
/// line.
///
/// @link https://dev.to/coderchamp/truncate-text-with-css-the-possible-ways-1p4o
/// @group helpers
///
/// @example scss
/// .username {
/// 	@include truncate;
/// }
///
/// @output css
/// .username {
/// 	overflow: hidden;
/// 	text-overflow: ellipsis;
/// 	white-space: nowrap;
/// }
///
/// @example scss
/// .excerpt {
/// 	@include truncate(5);
/// }
///
/// @output css
/// .excerpt {
///   display: block;
///   overflow: hidden;
///   display: -webkit-box;
///   -webkit-box-orient: vertical;
///   max-height: 7.5rem;
///   overflow:hidden;
///   overflow: hidden !important;
///   line-height: 1.5;
///   text-overflow: ellipsis;
///   -webkit-line-clamp: 5;
/// }
///
@mixin truncate ($lines: 1, $leading: c.$leading) {
  display: block;

  overflow: hidden;

  @if $lines > 1 {
    @if math.is-unitless($leading) {
      $leading: $leading * 1em;
    }

    // stylelint-disable-next-line value-no-vendor-prefix
    display: -webkit-box;
    // stylelint-disable-next-line property-no-vendor-prefix
    -webkit-box-orient: vertical;

    max-height: $leading * $lines;
    // stylelint-disable-next-line declaration-colon-space-after
    overflow:hidden;
    // stylelint-disable-next-line declaration-no-important, declaration-block-no-duplicate-properties
    overflow: hidden !important;

    line-height: $leading;
    text-overflow: ellipsis;
    -webkit-line-clamp: $lines;
  } @else {
    white-space: nowrap;
  }
}

///
/// Helper to justify the last line of an elements list.
///
/// @group helpers
///
/// @example scss
/// .sponsors {
/// 	@include justify-last-line;
/// }
///
/// @output css
/// .sponsors {
/// 	text-align: justify;
/// }
/// .sponsors::after {
/// 	display: inline-block;
/// 	width: 100%;
/// 	height: 0;
/// 	content: '';
/// }
///
@mixin justify-last-line {
  text-align: justify;

  &::after {
    display: inline-block;

    width: 100%;
    height: 0;

    content: '';
  }
}

/// Hide text while making it readable for screen readers
///
/// @group helpers
///
/// @example scss
/// .site-label {
/// 	@include hide-text;
/// }
///
/// @output css
/// .site-label {
/// 	padding: 0;
/// 	overflow: hidden;
/// 	text-indent: 101%;
/// 	white-space: nowrap;
/// }
///
@mixin hide-text {
  /**
	 * 1. Needed in WebKit-based browsers because of an implementation bug;
	 *    See: https://code.google.com/p/chromium/issues/detail?id=457146
	 */
  padding: 0; /* 1 */
  overflow: hidden;

  text-indent: 101%;
  white-space: nowrap;
}

@mixin image-replacement($overflow: true) {
  @if $overflow {
    overflow: hidden;

    text-indent: 101%;
    white-space: nowrap;

    background-repeat: no-repeat;

    direction: ltr;
  } @else {
    font: 0/0;
    color: transparent;
    text-shadow: none;

    border: 0;
  }
}

$no-alpha: false !default;
$no-calc: false !default;
$no-gradient: false !default;
$no-rem: false !default;
$no-viewport: false !default;

/// Helper to conditionally output css values
/// @author Robson Sobral
/// @group helpers
/// @param {String} $property - Property name
/// @param {List} $values - Default values
/// @param {List} $fallbacks - Non required fallback values
@mixin fallback($property, $values, $fallbacks: null) {
  $fallback-values: if($fallbacks == null, (), $fallbacks);
  $fallback-units: ();

  @each $value in $values {
    @if meta.type-of($value) == number {
      @if string.index(math.unit($value), 'v') != null {
        @if $fallbacks == null {
          @error 'fallback values, the 3rd parameter, are required for viewport units';
        } @else {
          $fallback-units: list.join($fallback-units, 'viewport');
        }
      } @else {
        $fallback-units: list.join($fallback-units, math.unit($value));
      }
    } @else if $fallbacks == null {
      @error 'fallback values, the 3rd parameter, are required for everything except `rem` numbers';
    } @else if meta.type-of($value) == calculation {
      $fallback-units: list.join($fallback-units, 'calc');
    } @else if string.index($value, 'gradient') {
      $fallback-units: list.join($fallback-units, 'gradient');
    }

    @if $fallbacks == null {
      @if meta.type-of($value) == number and math.unit($value) == 'rem' {
        $fallback-values: list.join($fallback-values, math.div($value, 1rem) * 16px);
      } @else {
        $fallback-values: list.join($fallback-values, $value);
      }
    }
  }

  @if (list.index($fallback-units, 'alpha') != null and $no-alpha != false) or
    (list.index($fallback-units, 'calc') != null and $no-calc != false) or
    (list.index($fallback-units, 'gradient') != null and $no-gradient != false) or
    (list.index($fallback-units, 'rem') != null and $no-rem != false) or
    (list.index($fallback-units, 'viewport') != null and $no-viewport != false) {
    #{$property}: #{$fallback-values};
  }

  @if (list.index($fallback-units, 'alpha') != null and $no-alpha != true) or
    (list.index($fallback-units, 'calc') != null and $no-calc != true) or
    (list.index($fallback-units, 'gradient') != null and $no-gradient != true) or
    (list.index($fallback-units, 'rem') != null and $no-rem != true) or
    (list.index($fallback-units, 'viewport') != null and $no-viewport != true) {
    #{$property}: #{$values};
  }

  @if ($fallback-units == () and $values) {
    #{$property}: #{$fallback-values};
    #{$property}: #{$values};
  }
}

/// Fix for vw, vh, vmin, vmax on iOS 7.
/// This fix works by replacing viewport units with px values on known screen sizes.
/// iPhone 6 and 6 Plus cannot run iOS 7, so are not targeted by this fix.
/// Target devices running iOS 8+ will incidentally execute the media query,
/// but this will still produce the expected result; so this is not a problem.
/// @group helpers
/// @link https://gist.github.com/BenMorel/e9e34c08360ebbbd0634
/// @link http://caniuse.com/#feat=viewport-units
///
/// @example scss
/// .hero {
/// 	@include viewport-unit(height, 50vh);
/// 	@include viewport-unit(font-size, 5vmin);
/// }
///
@mixin viewport-unit($property, $value) {
  $unit: math.unit($value);

  #{$property}: $value;

  @if (list.index((vw, vh, vmin, vmax), $unit) != null) {
    $devices: ((768px, 1024px), (320px, 480px), (320px, 568px));

    @each $device in $devices {
      $device-width: list.nth($device, 1);
      $device-height: list.nth($device, 2);
      $device-query: 'only screen and (-webkit-min-device-pixel-ratio: 1)';
      $device-query: '#{$device-query} and (device-width: #{$device-width})';
      $device-query: '#{$device-query} and (device-height: #{$device-height})';
      $percent: math.div($value, $value * 0 + 1); // see https://github.com/sass/sass/issues/533
      $percent-width: math.div($device-width * $percent, 100);
      $percent-height: math.div($device-height * $percent, 100);

      @if ($unit == vmin or $unit == vmax) {
        @media #{$device-query} {
          #{$property}: if($unit == vmin, $percent-width, $percent-height);
        }
      } @else {
        @media #{$device-query} and (orientation: portrait) {
          #{$property}: if($unit == vw, $percent-width, $percent-height);
        }

        @media #{$device-query} and (orientation: landscape) {
          #{$property}: if($unit == vw, $percent-height, $percent-width);
        }
      }
    }
  }
}

/// Returns the opposite direction of each direction in a list
/// @author Kitty Giraudel
/// @param {List} $directions - List of initial directions
/// @return {List} - List of opposite directions
/// @access private
@function _opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: (
    'top': 'bottom',
    'right': 'left',
    'bottom': 'top',
    'left': 'right',
    'center': 'center',
    'ltr': 'rtl',
    'rtl': 'ltr',
  );

  @each $direction in $directions {
    $direction: string.to-lower-case($direction);

    @if not index(top right bottom left, $direction) {
      @error 'Direction must be either `top`, `right`, `bottom` or `left`.';
    }

    @if map.has-key($direction-map, $direction) {
      $opposite-directions: list.append($opposite-directions, string.unquote(map.get($direction-map, $direction)));
    } @else {
      @warn 'No opposite direction can be found for `#{$direction}`. Direction omitted.';
    }
  }

  @return $opposite-directions;
}

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {number} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  $perpendicular-borders: $size solid transparent;

  @if not index(top right bottom left, $direction) {
    @error 'Direction must be either `top`, `right`, `bottom` or `left`.';
  }

  z-index: 2;

  width: 0;
  height: 0;

  // stylelint-disable-nex-line property-sort-order
  border-#{_opposite-direction($direction)}: ($size * 1.5) solid $color;

  @if not list.index(top right bottom left, $direction) {
    @error 'Direction must be either `top`, `right`, `bottom` or `left`.';
  }

  @if $direction == top or $direction == bottom {
    border-right: $perpendicular-borders;
    border-left: $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-top: $perpendicular-borders;
    border-bottom: $perpendicular-borders;
  }
}

/// Compute the maximum depth of a map
/// @param {Map} $map
/// @return {Number} max depth of `$map`
@function depth($map) {
  $level: 1;

  @each $key, $value in $map {
    @if meta.type-of($value) == 'map' {
      $level: math.max(depth($value) + 1, $level);
    }
  }

  @return $level;
}

/// Helper to set a two dimensional proportion to an element.
///
/// The height is a minimum. Set the contents height or their position to `absolute`,
/// if you want to always respect the proportion.
///
/// @group helpers
///
/// @param {list} $ratio - being a list of 2 elements, width and height, or 3,
/// width and height separated by a lowercase `x`
///
/// @example scss
/// div {
/// 	@include aspect-ratio(3 x 4);
/// }
///
/// @output css
/// div {
/// 	position: relative;
/// }
/// div::before {
/// 	float: left;
/// 	padding-top: 133.33333%; /* height / width * 100% */
/// 	content: '';
/// }
/// div::after {
/// 	clear: both;
/// 	display: table;
/// 	content: '';
/// }
///
@mixin aspect-ratio($ratio) {
  $w: null;
  $h: null;

  @if meta.type-of($ratio) == string {
    $ratio: f.aspect-ratio($ratio);
  }

  @if meta.type-of($ratio) != list {
    @error '`aspect-ratio` function expecting a list for `$ratio`; `#{meta.type-of($ratio)}` given.';
  } @else if list.length($ratio) == 3 and list.nth($ratio, 2) != 'x' and list.nth($ratio, 2) != '/' {
    @error 'when using 3 values length list, `aspect-ratio` function expects the second to be `x` or `/`; #{list.nth($ratio, 2)} given.';
  } @else if list.length($ratio) < 2 and list.length($ratio) > 3 {
    @error '`aspect-ratio` function expecting a list with 2 or 3 items for `$ratio`; `#{list.length($ratio)}` given.';
  } @else {
    $w: list.nth($ratio, 1);
    $h: if(length($ratio) == 3, list.nth($ratio, 3), list.nth($ratio, 2));
  }

  @if meta.type-of($w) != 'number' {
    @error 'the value sent to `width` isn\'t a `number`.';
  } @else if not math.is-unitless($w) {
    @error 'the value sent to `width` **must** be unitless.';
  }

  @if meta.type-of($h) != 'number' {
    @error 'the value sent to `height` isn\'t a `number`.';
  } @else if not math.is-unitless($h) {
    @error 'the value sent to `height` **must** be unitless.';
  }

  position: relative;

  &::before {
    float: left;
    padding-top: (math.div($h, $w) * 100%);

    content: '';
  }

  &::after {
    display: table;

    clear: both;

    content: '';
  }
}

/// Sass calc lock for line-height
/// @link http://blog.typekit.com/2016/08/17/flexible-typography-with-css-locks/
/// @link http://codepen.io/timbrown/full/akXvRw/
@mixin fluid-line-height(
  $font-size: null,
  $min-line-height: map.get(c.$leadings, 'min'),
  $max-line-height: map.get(c.$leadings, 'max'),
  $line-length-lower-gate: map.get(c.$line-lengths, 'min'),
  $line-length-upper-gate: map.get(c.$line-lengths, 'max')
) {
  line-height: $min-line-height;

  @if $font-size == null {
    @error 'the `font-size` of the element **must** be provided to calculate the media query limits.';
  } @else if math.unit($font-size) == '%' {
    $font-size: math.div($font-size, 100%);
  } @else if math.unit($font-size) == 'em' {
    $font-size: math.div($font-size, 1em);
  } @else if math.unit($font-size) == 'rem' {
    $font-size: math.div($font-size, 1rem);
  } @else if math.is-unitless($font-size) {
    @error 'the unit of the parameter sent should be `%`, `em`, `rem`. Unitless value given.';
  } @else {
    @error 'the unit of the parameter sent should be `%`, `em`, `rem`. `#{math.unit($font-size)}` given.';
  }

  @media screen and (min-width: #{$line-length-lower-gate * $font-size}) {
    line-height: calc(
      #{$min-line-height * 1em} + (#{$max-line-height} - #{$min-line-height}) * ((100vw - #{$line-length-lower-gate}) /
      (#{math.div($line-length-upper-gate, 1em)} - #{math.div($line-length-lower-gate, 1em)}))
    );
  }

  @media (min-width: #{$line-length-upper-gate * $font-size}) {
    line-height: $max-line-height;
  }
}

@mixin hyphens {
  hyphens: auto;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

@mixin focused {
  outline: 1px dotted currentColor;
  outline-offset: 0.25rem;
  box-shadow: 0 0 0 0.25rem color.scale(f.palette('accent'), $alpha: 50%);
}

@mixin columns($width: map-get(c.$line-lengths, 'column'), $gap: c.$gutter) {
  @include hyphens;

  column-fill: balance;

  column-gap: $gap;
  column-width: $width;

  max-width: 100%;
}

@mixin container {
  width: 100%;
  max-width: c.$max-width;
  padding-right: c.$gutter;
  padding-left: c.$gutter;
  margin-right: auto;
  margin-left: auto;
}

@mixin full-width {
  position: relative;
  right: 50%;
  left: 50%;

  width: 100vw;
  margin-right: -50vw;
  margin-left: -50vw;
}

@mixin headings {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  legend,
  caption,
  summary {
    @content;
  }
}

@mixin inner-border ($width: c.$stroke__thin, $style: solid, $color: currentColor) {
  th,
  td {
    + th,
    + td {
      border-left: $width $style $color;
    }
  }

  tr + tr {
    th,
    td {
      border-top: $width $style $color;
    }
  }
}


/// @link https://alistapart.com/article/quantity-queries-for-css/
@mixin at-least($n) {
  @if $n == 2 {
    &:not(:only-of-type) {
      @content;
    }
  } @else {
    $last-item: nth(nth(&, 1), length(nth(&, 1)));

    &:nth-last-child(n + #{$n}),
    &:nth-last-child(n + #{$n}) ~ #{$last-item} {
      @content;
    }
  }
}

@mixin at-most($n) {
  $last-item: nth(nth(&, 1), length(nth(&, 1)));

  &:nth-last-child(-n + #{$n}):first-child,
  &:nth-last-child(-n + #{$n}):first-child ~ #{$last-item} {
    @content;
  }
}

@mixin between($n1, $n2) {
  $last-item: nth(nth(&, 1), length(nth(&, 1)));

  &:nth-last-child(n + #{$n1}):nth-last-child(-n + #{$n2}):first-child,
  &:nth-last-child(n + #{$n1}):nth-last-child(-n + #{$n2}):first-child ~ #{$last-item} {
    @content;
  }
}

@mixin exactly($n) {
  @if $n == 1 {
    &:only-of-type {
      @content;
    }
  } @else {
    $last-item: nth(nth(&, 1), length(nth(&, 1)));

    &:nth-last-child(#{$n}):first-child,
    &:nth-last-child(#{$n}):first-child ~ #{$last-item} {
      @content;
    }
  }
}

@mixin odd {
  $last-item: nth(nth(&, 1), length(nth(&, 1)));

  &:nth-last-child(2n+1):first-child,
  &:nth-last-child(2n+1):first-child ~ #{$last-item} {
    @content;
  }
}

@mixin even {
  $last-item: nth(nth(&, 1), length(nth(&, 1)));

  &:nth-last-child(2n):first-child,
  &:nth-last-child(2n):first-child ~ #{$last-item} {
    @content;
  }
}

/// Targets the last row in a grid of constant column count
/// @link https://keithclark.co.uk/articles/targeting-first-and-last-rows-in-css-grid-layouts/
/// @link https://github.com/danielguillan/quantity-queries/issues/9#issue-177355092
/// @param {number} $n - The number of columns within the context
///
@mixin last-row($n, $balanced-grid: false) {
  $last-item: nth(nth(&, 1), length(nth(&, 1)));

  @if $balanced-grid {
    &:nth-last-child(-n + #{$n}) {
      @content;
    }
  } @else {
    &:nth-child(#{$n}n + 1):nth-last-child(-n + #{$n}),
    &:nth-child(#{$n}n + 1):nth-last-child(-n + #{$n}) ~ #{$last-item} {
      @content;
    }
  }
}
