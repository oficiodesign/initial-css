// -----------------------------------------------------------------------------
// This file contains all application-wide Sass variables.
// -----------------------------------------------------------------------------


$title-font-stack: $basic-title-font-stack;


/// Regular font family
/// @type List
$text-font-stack: $native-font-stack;

/// Code (monospace) font family
/// @type List
$code-font-stack: $basic-code-font-stack;

/// body text font-size
/// @type Length
$body-font-size: 1em !default;

$line-height: 1.5;

/// flexible line heights map
/// @access private
/// @type Map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are line-heights expressed in `em` due to a browser calc limitation
$line-heights: (
	'min': 1.15,
	'max': 1.5,
) !default;


/// flexible line length map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are line lenths expressed in `em`
$line-lengths: (
	'min': 21em,
	'max': 35em,
) !default;

/// @access private
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are pure colors or the returned value of functions
$palette: (
	'gray': (
		'x-light': tint(rgb(229, 231, 234), 10%),
		'light': rgb(229, 231, 234),
		'base': rgb(151, 153, 156),
		'dark': rgb(64, 68, 71),
		'x-dark': shade(rgb(64, 68, 71), 10%),
	),
	// 'anchor': (
	// 	'link': rgb(0, 0, 0),
	// 	'visited': rgb(0, 0, 0),
	// 	'hover': rgb(0, 0, 0),
	// 	'focus': rgb(0, 0, 0),
	// 	'active': rgb(0, 0, 0),
	// ),
	// 'border': rgb(192, 192, 192),
	// 'disabled':(
	// 	'foreground': rgb(0, 0, 0),
	// 	'background': rgb(0, 0, 0),
	// ),
	// 'loading': (
	// 	'foreground': hsl(0, 0%, 94%),
	// 	'background': hsla(0, 0%, 7%, 0.8),
	// ),
);


/// Default border-radius
/// @type Length
$border-radius: 0 !default;

/// Container's maximum width
/// @type Length
$max-width: 1180px !default;

@function im-to-em($breakpoints, $base-value: 16px) {
	$new-breakpoints: ();

	@each $name, $value in $breakpoints {
		$em-value: ($value / $base-value) * 1em;
		$new-breakpoints: map-merge($new-breakpoints, ($name: $em-value));
	}

	@return $new-breakpoints;
}

/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: im-to-em(
	(
		'phone': 320px,
		'tablet': 768px,
		'desktop': 1024px
	)
) !default;

// 320
// 480
// 760
// 960
// 1200
// 1600.


// layers map override
//
// being the default
// $layers: (
//     'modal': 5000,
//     'dropdown': 4000,
//     'default': 1,
//     'below': -1,
// );


/// Relative or absolute URL where all assets are served from
/// @type String
/// @example scss - When using a CDN
///   $base-url: 'http://cdn.example.com/assets/';
$base-url: '/assets/' !default;
