// Grids
// =====
// - su-span [function]
// - su-gutter [function]
// - su-sum [function]
// - su-slice [function]


// Su Span
// -------
/// Return a usable span width
/// in either relative or static units
///
/// @group math
///
/// @param {Number | List} $span -
///   Number or list of grid columns to span
/// @param {List} $columns -
///   List of columns available
/// @param {Number} $gutters -
///   Width of a gutter in column-comparable units
/// @param {0 | 1 | -1} $spread -
///   Number of gutters spanned,
///   relative to `span` count
/// @param {0 | 1 | -1} $container-spread [$spread] -
///   Number of gutters spanned,
///   relative to `columns` count
/// @param {Integer} $location [1] -
///   Optional position of sub-span among full set of columns
///
/// @return {Length} -
///   Relative or static length of a span on the grid
@function su-span(
  $span,
  $columns,
  $gutters,
  $spread,
  $container-spread: $spread,
  $location: 1
) {
  $columns: su-valid-columns($columns);
  $gutters: su-valid-gutters($gutters, $columns);
  $spread: su-valid-spread($spread);

  @if (type-of($span) == 'number') {
    @if unitless($span) {
      $location: su-valid-location($span, $location, $columns);
      $span: su-slice($span, $columns, $location, $validate: false);
    } @else {
      // if you give us e.g. 3em, fine, we'll give it right back
      @return $span;
    }
  }

  $span-width: su-sum($span, $gutters, $spread, $validate: false);

  @if unitless($span-width) {
    $container-spread: su-valid-spread($container-spread);
    $container: su-sum($columns, $gutters, $container-spread, $validate: false);
    @return percentage($span-width / $container);
  }

  @return $span-width;
}


// Su Gutter
// ---------
/// Return a usable gutter length
/// in either relative or static units
///
/// @group math
///
/// @param {List} $columns -
///   List of columns in the grid
/// @param {Number} $gutters -
///   Width of a gutter in column-comparable units
/// @param {0 | 1 | -1} $container-spread -
///   Number of gutters spanned,
///   relative to `columns` count
///
/// @return {Length} -
///   Relative or static length of one gutter in a grid
@function su-gutter(
  $columns,
  $gutters,
  $container-spread
) {
  @if (type-of($gutters) == 'number') {
    @if ($gutters == 0) or (not unitless($gutters)) {
      @return $gutters;
    }
  }

  $container: su-sum($columns, $gutters, $container-spread);
  @return percentage($gutters / $container);
}


// Su Sum
// ------
/// Get the total sum of column-units in a layout.
/// If static-gutter units aren't comparable to column-units,
/// gutters will be removed from the resulting sum
///
/// @group math
///
/// @param {List} $columns -
///   List of columns in the grid
/// @param {Number} $gutters -
///   Width of a gutter in column-comparable units
/// @param {0 | 1 | -1} $spread -
///   Number of gutters spanned,
///   relative to `columns` count
/// @param {Bool} $validate [true] -
///   Check that arguments are valid before proceeding
///
/// @return {Number} -
///   Total sum of column-units in a grid
@function su-sum(
  $columns,
  $gutters,
  $spread,
  $validate: true
) {
  @if $validate {
    $columns: su-valid-columns($columns);
    $gutters: su-valid-gutters($gutters, $columns);
    $spread: su-valid-spread($spread);
  }

  // Calculate column-sum
  $column-sum: 0;
  @each $column in $columns {
    $column-sum: $column-sum + $column;
  }

  // Gutters are removed from the math if they use non-comparable static units
  $not-comparable: not comparable($column-sum, $gutters);
  $is-mismatch: unitless($column-sum) and (not unitless($gutters));
  @if ($not-comparable or $is-mismatch) {
    @return $column-sum;
  }

  $gutter-sum: (ceil(length($columns)) + $spread) * $gutters;
  @return $column-sum + $gutter-sum;
}


// Su Slice
// --------
/// Return a subset of columns at a given location
///
/// @group math
///
/// @param {Number} $span -
///   Number of grid columns to span
/// @param {List} $columns -
///   List of columns in the grid
/// @param {Number} $location [1] -
///   Starting index of a span in the list of columns
/// @param {Bool} $validate [true] -
///   Check that arguments are valid before proceeding
///
/// @return {List} -
///   Subset list of grid columns, based on span and location
@function su-slice(
  $span,
  $columns,
  $location: 1,
  $validate: true
) {
  @if $validate {
    $columns: su-valid-columns($columns);
    $location: su-valid-location($span, $location, $columns);
  }

  $floor: floor($span);
  $sub-columns: ();

  @for $i from $location to ($location + $floor) {
    $sub-columns: append($sub-columns, nth($columns, $i));
  }

  @if $floor != $span {
    $remainder: $span - $floor;
    $column: $location + $floor;
    $sub-columns: append($sub-columns, nth($columns, $column) * $remainder);
  }

  @return $sub-columns;
}
